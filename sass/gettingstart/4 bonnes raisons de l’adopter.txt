Raison #1 Assignation de valeurs CSS aux variables : l’une des meilleures caractéristiques des préprocesseurs CSS

Avec SASS, il est possible d’assigner des valeurs CSS aux variables, ce qui signifie que l’ennuyeuse couleur hexagonale #91ea3d peut maintenant être définie comme une variable réutilisable à tout instant.

Pour changer la couleur, il suffit de mettre à jour la variable à un endroit et elle sera mise à jour dans toute la feuille de style.

===========================================================================
 
Raison #2 Nesting : l’impressionnante imbrication de sélecteur introuvable dans un CSS standard

L’imbrication est une fonctionnalité intéressante des préprocesseurs CSS. Elle imbrique les sélecteurs enfants dans leur sélecteur parent. Vous pouvez mémoriser toutes les règles de style appartenant au même parent directement les unes sous les autres. En termes de lisibilité de code, c’est une merveille !

C’est de loin la fonction la plus utilisée des préprocesseurs CSS : sur les 34065 sélecteurs, 21870 sont imbriqués, ou ont des sélecteurs imbriqués, soit 65 %.

===========================================================================
 
Raison #3 Une règle d’importation @import divisible et facile à lire chez SASS

Chez SASS, la fonction d’importation @import permet de couper un énorme fichier CSS en plus petits morceaux. Ça rend la lecture de code plus facile et maintient les fichiers plus petits plutôt qu’un gros fichier aux lignes sans fin.

Tandis que le CSS standard envoie une requête HTTP au serveur à chaque fois pour importer un fichier, SASS le fait sans requête HTTP.

===========================================================================

Raison #4 Un préprocesseur CSS résous les problèmes de compatibilités des navigateurs web

La plupart des entreprises travaillent en SCSS à partir de fin 2015. Il existe deux systèmes qui fonctionnent bien pour générer du code multi-navigateurs : Compass, et Bourbon, du pur SASS.

Compass est plus robuste, Bourbon est plus léger. Ce sont deux solutions qui automatisent efficacement le code entre les navigateurs. Le seul endroit où elles ne peuvent pas intervenir, c’est au niveau de la création d’un flexbox.

 
